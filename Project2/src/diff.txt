diff --git a/Project2/src/RFTPClient.cpp b/Project2/src/RFTPClient.cpp
index 513bc95..95528cd 100644
--- a/Project2/src/RFTPClient.cpp
+++ b/Project2/src/RFTPClient.cpp
@@ -6,6 +6,8 @@ RFTP Client constructor that creates a socket
 */
 RFTPClient::RFTPClient()
 {
+	this->size = PTHREAD_MUTEX_INITIALIZER;
+	this->is_empty = PTHREAD_COND_INITIALIZER;
 	serverS.sin_family = AF_INET;
 	serverR.sin_family = AF_INET;
 	sockR = socket(AF_INET, SOCK_DGRAM, 0);
@@ -100,15 +102,25 @@ bool RFTPClient::requestFile(char *filename)
 	bool flag = true;
 	int previousPacketNo = 3;
 	int fdWrite = open(abs_filename, O_CREAT | O_TRUNC| O_WRONLY, 0644);
+
+    pthread_t senderThread;
+    pthread_create(&senderThread, NULL, sender, (void*) this);
+
 	while (1) {
 		int n = recvfrom(sockR, received_packet,  PACKET_SIZE, 0, (struct sockaddr *)&serverS, &length);
 		if (n<= 0) {
 			return_val = false;
 			break;
 		}
+		
+		
 		Packet pack = Packet(received_packet);
+		pthread_mutex_lock(&(this->size));
+		ackQueue.push((pack.kind == CLOSE_CONNECTION ) ? -1 :pack.sequence_number);	
+		pthread_cond_signal(&(this->is_empty));
+		pthread_mutex_unlock(&(this->size));
+		
 		fileQueue.push(pack);
-		ackQueue.push(pack.sequence_number);
 		
 //		if(pack.sequence_number%1000 == 0) flag = !flag;
 		cout<<"Received packet number: "<<pack.sequence_number<<endl;
@@ -125,11 +137,14 @@ bool RFTPClient::requestFile(char *filename)
         //    send_packet(sockS, DATA_ACK, 0);
 		previousPacketNo = 	pack.sequence_number;
 	}
-		int a = ackQueue.size();
-	    int b = fileQueue.size();
+	
+	pthread_join(senderThread, NULL);
+	
+	int a = ackQueue.size();
+	int b = fileQueue.size();
 
-	    cout<<"File queue:\n";
-		for (int i=0; i< b; i++){
+	cout<<"File queue:\n";
+	for (int i=0; i< b; i++){
 		cout<<((fileQueue.top()).sequence_number)<<endl;
 		fileQueue.pop();
 	}
@@ -143,6 +158,21 @@ bool RFTPClient::requestFile(char *filename)
 	return return_val;
 }
 
+void* sender(void *obj) {
+    RFTPClient* client = (RFTPClient*) obj;
+    while(1) {
+        pthread_mutex_lock(&client->size);
+        if(client->fileQueue.empty()) 
+            pthread_cond_wait(&(client->is_empty),&(client->size));
+        int seq_no = client->ackQueue.front();
+
+        client->ackQueue.pop();
+        pthread_mutex_unlock(&client->size);
+        if(seq_no == -1) break;
+        client->send_packet(client->sockS, DATA_ACK, seq_no);
+    } 
+}
+
 /**
 send_packet() is used to send packet to the server without data.
 Type of packet sent here is mostly an acknowledgement packet
@@ -155,6 +185,7 @@ void RFTPClient::send_packet(int socket, PacketKind pk, int seq_no) {
     Packet packet = Packet(pk, seq_no, 0, data);
     uint8_t ptr[PACKET_SIZE];
     packet.serialize(ptr);
+    cout<<"Sending packet:\nKind: "<<pk<<endl<<"Seq No: "<<seq_no<<endl;
     sendto(socket, ptr, PACKET_SIZE, 0,(const struct sockaddr *)&serverR, length);
 }
 
diff --git a/Project2/src/RFTPClient.h b/Project2/src/RFTPClient.h
index c439782..d7611b0 100644
--- a/Project2/src/RFTPClient.h
+++ b/Project2/src/RFTPClient.h
@@ -22,9 +22,13 @@ class Compare {
     }
 };
 
+void* sender(void * args);
 
 class RFTPClient{
 	public:
+		pthread_t senderThread;
+		pthread_mutex_t size;
+		pthread_cond_t is_empty;
 		int sockR, sockS;                                                //Socket
 		unsigned int length;                                               //Unsigned int for length
 		struct sockaddr_in serverS, serverR;             //Client and serverS struct
diff --git a/Project2/src/RFTPServer.cpp b/Project2/src/RFTPServer.cpp
index 0dcf0f7..864e624 100644
--- a/Project2/src/RFTPServer.cpp
+++ b/Project2/src/RFTPServer.cpp
@@ -100,7 +100,7 @@ bool RFTPServer::fileReq(uint8_t *vfilename, int size_of_data)
 	
 	//Call 2 threads.	
 	pthread_t recvThread;
-//	pthread_create(&recvThread, NULL, receiver, this);
+	//pthread_create(&recvThread, NULL, receiver, this);
 	int bytesRead = 0;
 	int datasn = 4;
 	
diff --git a/Project2/src/tags b/Project2/src/tags
index 79fcb8a..2d9db3e 100644
--- a/Project2/src/tags
+++ b/Project2/src/tags
@@ -8,7 +8,7 @@ Bind	RFTPServer.cpp	/^void RFTPServer :: Bind(){$/;"	f	class:RFTPServer
 CLOSE_CONNECTION	Constants.h	/^	CLOSE_CONNECTION,                               \/\/Close Connection$/;"	e	enum:__anon1
 CONNECTION_ACK	Constants.h	/^	CONNECTION_ACK,                                 \/\/Connection Acknowledgement$/;"	e	enum:__anon1
 CONNECTION_REQUEST	Constants.h	/^	CONNECTION_REQUEST,                             \/\/Connection Request$/;"	e	enum:__anon1
-Compare	RFTPClient.h	/^class Compare{$/;"	c
+Compare	RFTPClient.h	/^class Compare {$/;"	c
 DATA	Constants.h	/^	DATA,                                           \/\/Data only$/;"	e	enum:__anon1
 DATA_ACK	Constants.h	/^	DATA_ACK,                                       \/\/Data Acknowledgement$/;"	e	enum:__anon1
 DATA_LOC	Constants.h	26;"	d
@@ -40,36 +40,40 @@ client_fs	Constants.h	30;"	d
 connectAndSend	RFTPClient.cpp	/^int RFTPClient::connectAndSend(char * hostname)$/;"	f	class:RFTPClient
 data	Packet.h	/^		uint8_t data[DATA_SIZE];                                             \/\/Pointer to the data being transferred$/;"	m	class:Packet
 fdRead	RFTPServer.h	/^		int fdRead;$/;"	m	class:RFTPServer
-fileQueue	RFTPClient.h	/^		std::priority_queue<Packet, std::vector<Packet>, Compare> fileQueue;$/;"	m	class:RFTPClient
+fileQueue	RFTPClient.h	/^		priority_queue<Packet, vector<Packet>, Compare> fileQueue;$/;"	m	class:RFTPClient
 fileReq	RFTPServer.cpp	/^bool RFTPServer::fileReq(uint8_t *vfilename, int size_of_data)$/;"	f	class:RFTPServer
 fromlen	RFTPServer.h	/^   		socklen_t fromlen;                                         \/\/Client length$/;"	m	class:RFTPServer
 hp	RFTPClient.h	/^   		struct hostent *hp;                                                \/\/Host net struct$/;"	m	class:RFTPClient	typeref:struct:RFTPClient::hostent
 isConnected	RFTPServer.h	/^		bool isConnected;                                                       \/\/Connection established or not$/;"	m	class:RFTPServer
+is_empty	RFTPClient.h	/^		pthread_cond_t is_empty;$/;"	m	class:RFTPClient
 kind	Packet.h	/^		PacketKind kind;                                        \/\/Type of packet$/;"	m	class:Packet
 length	RFTPClient.h	/^		unsigned int length;                                               \/\/Unsigned int for length$/;"	m	class:RFTPClient
 length	RFTPServer.h	/^		int sockS, sockR, length, lengthAck;$/;"	m	class:RFTPServer
 lengthAck	RFTPServer.h	/^		int sockS, sockR, length, lengthAck;$/;"	m	class:RFTPServer
 main	Client.cpp	/^int main(int argc, char *argv[])$/;"	f
 main	Server.cpp	/^int main(int argc, char *argv[])$/;"	f
-operator ()	RFTPClient.h	/^	bool operator()(Packet p1, Packet p2) {return (p1.sequence_number < p2.sequence_number);};$/;"	f	class:Compare
+operator ()	RFTPClient.h	/^    bool operator()(Packet p1, Packet p2) {$/;"	f	class:Compare
 printPacket	Packet.cpp	/^void Packet::printPacket()$/;"	f	class:Packet
 read_timeout	RFTPServer.h	/^		struct timeval read_timeout;                                            \/\/Timeout for reading data$/;"	m	class:RFTPServer	typeref:struct:RFTPServer::timeval
 receivePacket	RFTPServer.cpp	/^void RFTPServer::receivePacket(){$/;"	f	class:RFTPServer
 receiver	RFTPServer.cpp	/^void* receiver(void* rcvargs) {$/;"	f
 requestFile	RFTPClient.cpp	/^bool RFTPClient::requestFile(char *filename)$/;"	f	class:RFTPClient
 reset_timeout	RFTPServer.h	/^		struct timeval reset_timeout;                                           \/\/Timeout after reset$/;"	m	class:RFTPServer	typeref:struct:RFTPServer::timeval
-send_packet	RFTPClient.cpp	/^void RFTPClient::send_packet(PacketKind pk, int seq_no, int size, void *data) {$/;"	f	class:RFTPClient
+send_packet	RFTPClient.cpp	/^void RFTPClient::send_packet(PacketKind pk, int seq_no, int size, uint8_t *data) {$/;"	f	class:RFTPClient
 send_packet	RFTPClient.cpp	/^void RFTPClient::send_packet(int socket, PacketKind pk, int seq_no) {$/;"	f	class:RFTPClient
 send_packet	RFTPServer.cpp	/^void RFTPServer::send_packet(PacketKind pk, int seq_no) {$/;"	f	class:RFTPServer
-send_packet	RFTPServer.cpp	/^void RFTPServer::send_packet(PacketKind pk, int seq_no, int size, void *data) {$/;"	f	class:RFTPServer
+send_packet	RFTPServer.cpp	/^void RFTPServer::send_packet(PacketKind pk, int seq_no, int size, uint8_t* data) {$/;"	f	class:RFTPServer
+sender	RFTPClient.cpp	/^void* sender(void *obj) {$/;"	f
 sender	RFTPServer.cpp	/^void* sender(void* sndargs) {$/;"	f
+senderThread	RFTPClient.h	/^		pthread_t senderThread;$/;"	m	class:RFTPClient
 sequence_number	Packet.h	/^		int sequence_number;                                    \/\/Sequence number of the packet$/;"	m	class:Packet
-serialize	Packet.cpp	/^uint8_t* Packet:: serialize(){$/;"	f	class:Packet
+serialize	Packet.cpp	/^uint8_t* Packet:: serialize(uint8_t *buffer){$/;"	f	class:Packet
 serverR	RFTPClient.h	/^		struct sockaddr_in serverS, serverR;             \/\/Client and serverS struct$/;"	m	class:RFTPClient	typeref:struct:RFTPClient::
 serverR	RFTPServer.h	/^		struct sockaddr_in serverR;$/;"	m	class:RFTPServer	typeref:struct:RFTPServer::sockaddr_in
 serverS	RFTPClient.h	/^		struct sockaddr_in serverS, serverR;             \/\/Client and serverS struct$/;"	m	class:RFTPClient	typeref:struct:RFTPClient::sockaddr_in
 serverS	RFTPServer.h	/^   		struct sockaddr_in serverS;                                              \/\/Server's socket struct$/;"	m	class:RFTPServer	typeref:struct:RFTPServer::sockaddr_in
 server_fs	Constants.h	31;"	d
+size	RFTPClient.h	/^		pthread_mutex_t size;$/;"	m	class:RFTPClient
 sizeOfData	Packet.h	/^		int sizeOfData;                                         \/\/Size of Data being transferred$/;"	m	class:Packet
 sockR	RFTPClient.h	/^		int sockR, sockS;                                                \/\/Socket$/;"	m	class:RFTPClient
 sockR	RFTPServer.h	/^		int sockS, sockR, length, lengthAck;$/;"	m	class:RFTPServer

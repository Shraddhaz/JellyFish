!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
Bind	RFTPServer.cpp	/^void RFTPServer :: Bind(){$/;"	f	class:RFTPServer
CLOSE_CONNECTION	Constants.h	/^	CLOSE_CONNECTION,$/;"	e	enum:__anon1
CONNECTION_ACK	Constants.h	/^	CONNECTION_ACK,$/;"	e	enum:__anon1
CONNECTION_REQUEST	Constants.h	/^	CONNECTION_REQUEST,$/;"	e	enum:__anon1
DATA	Constants.h	/^	DATA,$/;"	e	enum:__anon1
DATA_ACK	Constants.h	/^	DATA_ACK,$/;"	e	enum:__anon1
DATA_LOC	Constants.h	19;"	d
DATA_SIZE	Constants.h	4;"	d
DATA_SIZE_LOC	Constants.h	18;"	d
FILE_REQUEST	Constants.h	/^	FILE_REQUEST,$/;"	e	enum:__anon1
FILE_REQUEST_ACK	Constants.h	/^	FILE_REQUEST_ACK,$/;"	e	enum:__anon1
HOSTNAME	Constants.h	2;"	d
ListenAccept	RFTPServer.cpp	/^void RFTPServer::ListenAccept(){$/;"	f	class:RFTPServer
PACKET_SIZE	Constants.h	21;"	d
PORT_NUMBER	Constants.h	1;"	d
Packet	Packet.cpp	/^Packet::Packet(PacketKind kind,int sequence_number , int sizeOfData, void *pdata){$/;"	f	class:Packet
Packet	Packet.cpp	/^Packet::Packet(void *buf){$/;"	f	class:Packet
Packet	Packet.h	/^class Packet {$/;"	c
PacketKind	Constants.h	/^} PacketKind;$/;"	t	typeref:enum:__anon1
RFTPClient	RFTPClient.cpp	/^RFTPClient::RFTPClient()$/;"	f	class:RFTPClient
RFTPClient	RFTPClient.h	/^class RFTPClient{$/;"	c
RFTPServer	RFTPServer.cpp	/^RFTPServer::RFTPServer(){$/;"	f	class:RFTPServer
RFTPServer	RFTPServer.h	/^class RFTPServer {$/;"	c
SEQNO_LOC	Constants.h	17;"	d
connectAndSend	RFTPClient.cpp	/^int RFTPClient::connectAndSend()$/;"	f	class:RFTPClient
data	Packet.h	/^		void *data;$/;"	m	class:Packet
error	Client.cpp	/^void error(const char *msg)$/;"	f
error	RFTPServer.cpp	/^void error(const char *msg)$/;"	f
fileReq	RFTPServer.cpp	/^void RFTPServer::fileReq(void *vfilename, int size_of_data)$/;"	f	class:RFTPServer
from	RFTPClient.h	/^		struct sockaddr_in server, from; $/;"	m	class:RFTPClient	typeref:struct:RFTPClient::
from	RFTPServer.h	/^   		struct sockaddr_in from;$/;"	m	class:RFTPServer	typeref:struct:RFTPServer::sockaddr_in
fromlen	RFTPServer.h	/^   		socklen_t fromlen;$/;"	m	class:RFTPServer
hp	RFTPClient.h	/^   		struct hostent *hp; $/;"	m	class:RFTPClient	typeref:struct:RFTPClient::hostent
isConnected	RFTPServer.h	/^		bool isConnected;$/;"	m	class:RFTPServer
kind	Packet.h	/^		PacketKind kind;$/;"	m	class:Packet
length	RFTPClient.h	/^		unsigned int length;$/;"	m	class:RFTPClient
length	RFTPServer.h	/^		int sock, length;$/;"	m	class:RFTPServer
main	Client.cpp	/^int main(int argc, char *argv[])$/;"	f
main	Server.cpp	/^int main(int argc, char *argv[])$/;"	f
printPacket	Packet.cpp	/^void Packet::printPacket()$/;"	f	class:Packet
receivePacket	RFTPClient.cpp	/^void RFTPClient::receivePacket(){$/;"	f	class:RFTPClient
receivePacket	RFTPServer.cpp	/^void RFTPServer::receivePacket(){$/;"	f	class:RFTPServer
requestFile	RFTPClient.cpp	/^bool RFTPClient::requestFile(char *filename)$/;"	f	class:RFTPClient
sequence_number	Packet.h	/^		int sequence_number;$/;"	m	class:Packet
serialize	Packet.cpp	/^void* Packet:: serialize(){$/;"	f	class:Packet
server	RFTPClient.h	/^		struct sockaddr_in server, from; $/;"	m	class:RFTPClient	typeref:struct:RFTPClient::sockaddr_in
server	RFTPServer.h	/^   		struct sockaddr_in server;$/;"	m	class:RFTPServer	typeref:struct:RFTPServer::sockaddr_in
sizeOfData	Packet.h	/^		int sizeOfData;$/;"	m	class:Packet
sock	RFTPClient.h	/^		int sock;$/;"	m	class:RFTPClient
sock	RFTPServer.h	/^		int sock, length;$/;"	m	class:RFTPServer
~Packet	Packet.cpp	/^Packet::~Packet()$/;"	f	class:Packet
~RFTPClient	RFTPClient.cpp	/^RFTPClient::~RFTPClient()$/;"	f	class:RFTPClient
